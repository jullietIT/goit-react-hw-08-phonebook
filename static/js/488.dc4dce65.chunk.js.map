{"version":3,"file":"static/js/488.dc4dce65.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts.module.css?8552","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ContactForm_title__jZguf\",\"wrapper\":\"ContactForm_wrapper__-Umw-\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"focus\":\"ContactForm_focus__OtBSc\"};","// export const selectLoading = state => state.contacts.loading;\n\n// export const selectFilter = state => state.contacts.filter;\n\n// export const selectAllContacts = state => state.contacts.items;\n\nexport const getContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.filter.status;\n//new\n// export const getTasks = state => state.tasks.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { getContacts } from '../../redux/contacts/selectors';\n// Импортируем хук\nimport { useDispatch, useSelector } from 'react-redux';\n// Импортируем генератор экшена\n//\nimport { addContacts } from '../../redux/contacts/operations';\n\nexport const ContactForm = () => {\n  // Получаем ссылку на функцию отправки экшенов\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const contacts = useSelector(getContacts);\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContacts({ name, number }));\n    }\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <h1 className={css.title}>Phonebook</h1>\n\n      <div className={css.wrapper}>\n        <form onSubmit={handleSubmit}>\n          <label className={css.label}>\n            Name\n            <input\n              className={css.input}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              placeholder=\"create new name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя должно состоять из букв, заглавных\"\n              required\n            />\n          </label>\n          <label className={css.label}>\n            Number\n            <input\n              className={css.input}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              value={number}\n              placeholder=\"new number\"\n              onChange={handleChange}\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            />\n          </label>\n\n          <button className={css.button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"ContactList_ul__ppW9Q\",\"button\":\"ContactList_button__7kL4l\",\"focus\":\"ContactList_focus__ILQ8A\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts, fetchContacts } from '../../redux/contacts/operations';\nimport {\n  getContacts,\n  getFilter,\n  getIsLoading,\n  getError,\n} from 'redux/contacts/selectors.js';\nimport { useEffect } from 'react';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filters = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(filters.toLowerCase())\n  );\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.ul}>\n      {isLoading && !error && <p>Request in progress...</p>}\n      {error && <p></p>}\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button\n            className={css.button}\n            type=\"button\"\n            onClick={() => dispatch(deleteContacts(id))}\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"Filter_div__h0z7C\",\"h2\":\"Filter_h2__8Oj7k\",\"h3\":\"Filter_h3__oBAEd\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setStatusFilter } from '../../redux/filtersSlice';\nimport { nanoid } from 'nanoid';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport css from './Filter.module.css';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(getFilter);\n  const filterId = nanoid(3);\n\n  const handleChange = e => {\n    dispatch(setStatusFilter(e.target.value)); //передаємо значення у фільтрі\n  };\n  return (\n    <div className={css.div} htmlFor={filterId}>\n      <h2 className={css.h2}>Your contacts</h2>\n      <h3 className={css.h3}>Find contact by name</h3>\n      <label>\n        <input\n          type=\"text\"\n          id={filterId}\n          value={filters}\n          placeholder=\"enter contact name\"\n          onChange={handleChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"Wrapper\":\"Contacts_Wrapper__yLCxZ\"};","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport css from './Contacts.module.css';\n\nexport default function Contacts() {\n  return (\n    <>\n      <div className={css.Wrapper}>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","getFilter","filter","status","getIsLoading","isLoading","getError","error","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","useSelector","className","css","onSubmit","event","preventDefault","some","contact","toLowerCase","alert","addContacts","type","onChange","placeholder","pattern","title","required","filters","visibleContacts","toLocaleLowerCase","includes","useEffect","fetchContacts","map","id","onClick","deleteContacts","filterId","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","setStatusFilter","target","Contacts"],"sourceRoot":""}